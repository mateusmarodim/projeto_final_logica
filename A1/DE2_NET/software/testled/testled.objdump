
testled.elf:     file format elf32-littlenios2
testled.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000018f8 memsz 0x00001a14 flags rwx
    LOAD off    0x00003000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01400000  01400000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001500  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  008016b4  008016b4  000026b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000224  008016f4  008016f4  000026f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  00801918  00801918  00002918  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003b8  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000005a5  00000000  00000000  00003400  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005cc0  00000000  00000000  000039a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000160f  00000000  00000000  00009665  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000441c  00000000  00000000  0000ac74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000005d8  00000000  00000000  0000f090  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000003f5  00000000  00000000  0000f668  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006f0  00000000  00000000  0000fa5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00010150  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00010180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011722  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00011725  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001172a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001172b  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001172c  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00011730  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00011734  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00011738  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00011743  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001174e  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00011759  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000018  00000000  00000000  00011761  2**0
                  CONTENTS, READONLY
 29 .jdi          00004c3e  00000000  00000000  00011779  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000ae3db  00000000  00000000  000163b7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
008016b4 l    d  .rodata	00000000 .rodata
008016f4 l    d  .rwdata	00000000 .rwdata
00801918 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008016f4 l     O .rwdata	0000002c jtag_uart_0
00801720 l     O .rwdata	0000002c uart_0
008002fc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080058c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080080c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080095c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008009bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00800a9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00800dc8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00800f04 l     F .text	000000dc alt_file_locked
00801168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00800218 g     F .text	0000005c alt_main
00801934 g     O .bss	00000100 alt_irq
00000000  w      *UND*	00000000 __errno
01400000 g     F .entry	0000001c __reset
00801930 g     O .bss	00000004 errno
0080191c g     O .bss	00000004 alt_argv
008098f4 g       *ABS*	00000000 _gp
01a81800 g       *ABS*	00000000 __alt_mem_epcs_controller
00801774 g     O .rwdata	00000180 alt_fd_list
008013ec g     F .text	00000094 alt_find_dev
00800e8c g     F .text	00000078 alt_io_redirect
008003e4 g     F .text	00000104 altera_avalon_jtag_uart_read
00801904 g     O .rwdata	00000004 alt_max_fd
00801a34 g       *ABS*	00000000 __bss_end
00800cd0 g     F .text	000000f8 alt_iic_isr_register
008012c0 g     F .text	0000010c alt_tick
00800c88 g     F .text	00000048 alt_ic_irq_enabled
00801228 g     F .text	00000098 alt_alarm_stop
00801924 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080174c g     O .rwdata	00000028 alt_dev_null
008018fc g     O .rwdata	00000008 alt_dev_list
00801a34 g       *ABS*	00000000 end
0080086c g     F .text	000000f0 altera_avalon_uart_write
01000000 g       *ABS*	00000000 __alt_stack_pointer
008005fc g     F .text	00000090 alt_avalon_timer_sc_init
008006e4 g     F .text	00000058 altera_avalon_uart_write_fd
008004e8 g     F .text	000000a4 altera_avalon_jtag_uart_write
01400000 g       *ABS*	00000000 __alt_mem_cfi_flash_0
008001b4 g     F .text	00000048 _start
00801928 g     O .bss	00000004 _alt_tick_rate
0080192c g     O .bss	00000004 _alt_nticks
008002a8 g     F .text	00000054 alt_sys_init
00800334 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008015a0 g     F .text	000000b8 alt_get_fd
00801658 g     F .text	0000003c memcmp
00801a34 g       *ABS*	00000000 __alt_stack_base
00801480 g     F .text	00000120 alt_find_file
008009e8 g     F .text	000000b4 alt_dev_llist_insert
00801918 g       *ABS*	00000000 __bss_start
008001fc g     F .text	0000001c main
00801920 g     O .bss	00000004 alt_envp
0080038c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00801908 g     O .rwdata	00000004 alt_errno
01a00000 g       *ABS*	00000000 __alt_mem_sram_0
00800274 g     F .text	00000034 alt_irq_init
008011c8 g     F .text	00000060 alt_release_fd
00801918 g     O .bss	00000004 alt_argc
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
008018f4 g     O .rwdata	00000008 alt_fs_list
00800afc g     F .text	00000050 alt_ic_isr_register
00801918 g       *ABS*	00000000 _edata
0080068c g     F .text	00000058 altera_avalon_uart_read_fd
00801a34 g       *ABS*	00000000 _end
00800be8 g     F .text	000000a0 alt_ic_irq_disable
008013cc g     F .text	00000020 altera_nios2_qsys_irq_init
0140001c g       .entry	00000000 exit
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0140001c g       .entry	00000000 _exit
00801694 g     F .text	00000020 strlen
00800fe0 g     F .text	00000188 open
0080190c g     O .rwdata	00000004 alt_priority_mask
00800b4c g     F .text	0000009c alt_ic_irq_enable
0080073c g     F .text	000000d0 altera_avalon_uart_read
00801910 g     O .rwdata	00000008 alt_alarm_list



Disassembly of section .entry:

01400000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1400000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1400004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1400008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 140000c:	00bffd16 	blt	zero,r2,1400004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1400010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1400014:	08406d14 	ori	at,at,436
    jmp r1
 1400018:	0800683a 	jmp	at

0140001c <_exit>:
 140001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02034 	movhi	r3,128
  800134:	18c64d04 	addi	r3,r3,6452
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02034 	movhi	r3,128
  80014c:	18c64d04 	addi	r3,r3,6452
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  8001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001bc:	10bfff04 	addi	r2,r2,-4
    bgt r2, zero, 0b
  8001c0:	00bffd16 	blt	zero,r2,8001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001c4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001cc:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  8001d0:	d6a63d14 	ori	gp,gp,39156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001d4:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  8001d8:	10864614 	ori	r2,r2,6424

    movhi r3, %hi(__bss_end)
  8001dc:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  8001e0:	18c68d14 	ori	r3,r3,6708

    beq r2, r3, 1f
  8001e4:	10c00326 	beq	r2,r3,8001f4 <_start+0x40>

0:
    stw zero, (r2)
  8001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001f0:	10fffd36 	bltu	r2,r3,8001e8 <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001f4:	08002180 	call	800218 <alt_main>

008001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001f8:	003fff06 	br	8001f8 <alt_after_alt_main>

008001fc <main>:
#include <stdio.h>
#include "io.h"
#include "system.h"

int main()
{
  8001fc:	deffff04 	addi	sp,sp,-4
  800200:	df000015 	stw	fp,0(sp)
  800204:	d839883a 	mov	fp,sp
	while(1) IOWR(0, 0, 1);
  800208:	0007883a 	mov	r3,zero
  80020c:	00800044 	movi	r2,1
  800210:	18800035 	stwio	r2,0(r3)
  800214:	003ffc06 	br	800208 <main+0xc>

00800218 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800218:	defffe04 	addi	sp,sp,-8
  80021c:	dfc00115 	stw	ra,4(sp)
  800220:	df000015 	stw	fp,0(sp)
  800224:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800228:	0009883a 	mov	r4,zero
  80022c:	08002740 	call	800274 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800230:	08002a80 	call	8002a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  800234:	01002034 	movhi	r4,128
  800238:	2105ad04 	addi	r4,r4,5812
  80023c:	01402034 	movhi	r5,128
  800240:	2945ad04 	addi	r5,r5,5812
  800244:	01802034 	movhi	r6,128
  800248:	3185ad04 	addi	r6,r6,5812
  80024c:	0800e8c0 	call	800e8c <alt_io_redirect>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  800250:	d1200917 	ldw	r4,-32732(gp)
  800254:	d1600a17 	ldw	r5,-32728(gp)
  800258:	d1a00b17 	ldw	r6,-32724(gp)
  80025c:	08001fc0 	call	8001fc <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  800260:	e037883a 	mov	sp,fp
  800264:	dfc00117 	ldw	ra,4(sp)
  800268:	df000017 	ldw	fp,0(sp)
  80026c:	dec00204 	addi	sp,sp,8
  800270:	f800283a 	ret

00800274 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800274:	defffd04 	addi	sp,sp,-12
  800278:	dfc00215 	stw	ra,8(sp)
  80027c:	df000115 	stw	fp,4(sp)
  800280:	df000104 	addi	fp,sp,4
  800284:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
  800288:	08013cc0 	call	8013cc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80028c:	00800044 	movi	r2,1
  800290:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800294:	e037883a 	mov	sp,fp
  800298:	dfc00117 	ldw	ra,4(sp)
  80029c:	df000017 	ldw	fp,0(sp)
  8002a0:	dec00204 	addi	sp,sp,8
  8002a4:	f800283a 	ret

008002a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8002a8:	defffe04 	addi	sp,sp,-8
  8002ac:	dfc00115 	stw	ra,4(sp)
  8002b0:	df000015 	stw	fp,0(sp)
  8002b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  8002b8:	01006a34 	movhi	r4,424
  8002bc:	21080804 	addi	r4,r4,8224
  8002c0:	000b883a 	mov	r5,zero
  8002c4:	018000c4 	movi	r6,3
  8002c8:	01c0fa04 	movi	r7,1000
  8002cc:	08005fc0 	call	8005fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_CFI_FLASH_INIT ( CFI_FLASH_0, cfi_flash_0);
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_CONTROLLER, epcs_controller);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8002d0:	01002034 	movhi	r4,128
  8002d4:	2105bd04 	addi	r4,r4,5876
  8002d8:	08002fc0 	call	8002fc <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
  8002dc:	01002034 	movhi	r4,128
  8002e0:	2105c804 	addi	r4,r4,5920
  8002e4:	08002fc0 	call	8002fc <alt_dev_reg>
}
  8002e8:	e037883a 	mov	sp,fp
  8002ec:	dfc00117 	ldw	ra,4(sp)
  8002f0:	df000017 	ldw	fp,0(sp)
  8002f4:	dec00204 	addi	sp,sp,8
  8002f8:	f800283a 	ret

008002fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8002fc:	defffd04 	addi	sp,sp,-12
  800300:	dfc00215 	stw	ra,8(sp)
  800304:	df000115 	stw	fp,4(sp)
  800308:	df000104 	addi	fp,sp,4
  80030c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800310:	e13fff17 	ldw	r4,-4(fp)
  800314:	01402034 	movhi	r5,128
  800318:	29463f04 	addi	r5,r5,6396
  80031c:	08009e80 	call	8009e8 <alt_dev_llist_insert>
}
  800320:	e037883a 	mov	sp,fp
  800324:	dfc00117 	ldw	ra,4(sp)
  800328:	df000017 	ldw	fp,0(sp)
  80032c:	dec00204 	addi	sp,sp,8
  800330:	f800283a 	ret

00800334 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800334:	defffa04 	addi	sp,sp,-24
  800338:	dfc00515 	stw	ra,20(sp)
  80033c:	df000415 	stw	fp,16(sp)
  800340:	df000404 	addi	fp,sp,16
  800344:	e13ffd15 	stw	r4,-12(fp)
  800348:	e17ffe15 	stw	r5,-8(fp)
  80034c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800350:	e0bffd17 	ldw	r2,-12(fp)
  800354:	10800017 	ldw	r2,0(r2)
  800358:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80035c:	e0bffc17 	ldw	r2,-16(fp)
  800360:	11000a04 	addi	r4,r2,40
  800364:	e0bffd17 	ldw	r2,-12(fp)
  800368:	11c00217 	ldw	r7,8(r2)
  80036c:	e17ffe17 	ldw	r5,-8(fp)
  800370:	e1bfff17 	ldw	r6,-4(fp)
  800374:	08003e40 	call	8003e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800378:	e037883a 	mov	sp,fp
  80037c:	dfc00117 	ldw	ra,4(sp)
  800380:	df000017 	ldw	fp,0(sp)
  800384:	dec00204 	addi	sp,sp,8
  800388:	f800283a 	ret

0080038c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80038c:	defffa04 	addi	sp,sp,-24
  800390:	dfc00515 	stw	ra,20(sp)
  800394:	df000415 	stw	fp,16(sp)
  800398:	df000404 	addi	fp,sp,16
  80039c:	e13ffd15 	stw	r4,-12(fp)
  8003a0:	e17ffe15 	stw	r5,-8(fp)
  8003a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8003a8:	e0bffd17 	ldw	r2,-12(fp)
  8003ac:	10800017 	ldw	r2,0(r2)
  8003b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8003b4:	e0bffc17 	ldw	r2,-16(fp)
  8003b8:	11000a04 	addi	r4,r2,40
  8003bc:	e0bffd17 	ldw	r2,-12(fp)
  8003c0:	11c00217 	ldw	r7,8(r2)
  8003c4:	e17ffe17 	ldw	r5,-8(fp)
  8003c8:	e1bfff17 	ldw	r6,-4(fp)
  8003cc:	08004e80 	call	8004e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8003d0:	e037883a 	mov	sp,fp
  8003d4:	dfc00117 	ldw	ra,4(sp)
  8003d8:	df000017 	ldw	fp,0(sp)
  8003dc:	dec00204 	addi	sp,sp,8
  8003e0:	f800283a 	ret

008003e4 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  8003e4:	defff604 	addi	sp,sp,-40
  8003e8:	df000915 	stw	fp,36(sp)
  8003ec:	df000904 	addi	fp,sp,36
  8003f0:	e13ffb15 	stw	r4,-20(fp)
  8003f4:	e17ffc15 	stw	r5,-16(fp)
  8003f8:	e1bffd15 	stw	r6,-12(fp)
  8003fc:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
  800400:	e0bffb17 	ldw	r2,-20(fp)
  800404:	10800017 	ldw	r2,0(r2)
  800408:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
  80040c:	e0bffc17 	ldw	r2,-16(fp)
  800410:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
  800414:	e0bffd17 	ldw	r2,-12(fp)
  800418:	1007883a 	mov	r3,r2
  80041c:	e0bffc17 	ldw	r2,-16(fp)
  800420:	10c5883a 	add	r2,r2,r3
  800424:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
  800428:	00001606 	br	800484 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80042c:	e0bffa17 	ldw	r2,-24(fp)
  800430:	10800037 	ldwio	r2,0(r2)
  800434:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  800438:	e0bff717 	ldw	r2,-36(fp)
  80043c:	10a0000c 	andi	r2,r2,32768
  800440:	1005003a 	cmpeq	r2,r2,zero
  800444:	1000081e 	bne	r2,zero,800468 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800448:	e0bff717 	ldw	r2,-36(fp)
  80044c:	1007883a 	mov	r3,r2
  800450:	e0bff917 	ldw	r2,-28(fp)
  800454:	10c00005 	stb	r3,0(r2)
  800458:	e0bff917 	ldw	r2,-28(fp)
  80045c:	10800044 	addi	r2,r2,1
  800460:	e0bff915 	stw	r2,-28(fp)
  800464:	00000706 	br	800484 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
  800468:	e0fff917 	ldw	r3,-28(fp)
  80046c:	e0bffc17 	ldw	r2,-16(fp)
  800470:	1880071e 	bne	r3,r2,800490 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
  800474:	e0bffe17 	ldw	r2,-8(fp)
  800478:	1090000c 	andi	r2,r2,16384
  80047c:	1004c03a 	cmpne	r2,r2,zero
  800480:	1000031e 	bne	r2,zero,800490 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  800484:	e0fff917 	ldw	r3,-28(fp)
  800488:	e0bff817 	ldw	r2,-32(fp)
  80048c:	18bfe736 	bltu	r3,r2,80042c <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  800490:	e0fff917 	ldw	r3,-28(fp)
  800494:	e0bffc17 	ldw	r2,-16(fp)
  800498:	18800526 	beq	r3,r2,8004b0 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
  80049c:	e0fff917 	ldw	r3,-28(fp)
  8004a0:	e0bffc17 	ldw	r2,-16(fp)
  8004a4:	1887c83a 	sub	r3,r3,r2
  8004a8:	e0ffff15 	stw	r3,-4(fp)
  8004ac:	00000906 	br	8004d4 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
  8004b0:	e0bffe17 	ldw	r2,-8(fp)
  8004b4:	1090000c 	andi	r2,r2,16384
  8004b8:	1005003a 	cmpeq	r2,r2,zero
  8004bc:	1000031e 	bne	r2,zero,8004cc <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
  8004c0:	00bffd44 	movi	r2,-11
  8004c4:	e0bfff15 	stw	r2,-4(fp)
  8004c8:	00000206 	br	8004d4 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
  8004cc:	00bffec4 	movi	r2,-5
  8004d0:	e0bfff15 	stw	r2,-4(fp)
  8004d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8004d8:	e037883a 	mov	sp,fp
  8004dc:	df000017 	ldw	fp,0(sp)
  8004e0:	dec00104 	addi	sp,sp,4
  8004e4:	f800283a 	ret

008004e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8004e8:	defff904 	addi	sp,sp,-28
  8004ec:	df000615 	stw	fp,24(sp)
  8004f0:	df000604 	addi	fp,sp,24
  8004f4:	e13ffc15 	stw	r4,-16(fp)
  8004f8:	e17ffd15 	stw	r5,-12(fp)
  8004fc:	e1bffe15 	stw	r6,-8(fp)
  800500:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  800504:	e0bffc17 	ldw	r2,-16(fp)
  800508:	10800017 	ldw	r2,0(r2)
  80050c:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
  800510:	e0bffe17 	ldw	r2,-8(fp)
  800514:	1007883a 	mov	r3,r2
  800518:	e0bffd17 	ldw	r2,-12(fp)
  80051c:	10c5883a 	add	r2,r2,r3
  800520:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  800524:	00001106 	br	80056c <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  800528:	e0bffb17 	ldw	r2,-20(fp)
  80052c:	10800104 	addi	r2,r2,4
  800530:	10800037 	ldwio	r2,0(r2)
  800534:	10bfffec 	andhi	r2,r2,65535
  800538:	1005003a 	cmpeq	r2,r2,zero
  80053c:	10000b1e 	bne	r2,zero,80056c <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800540:	e13ffb17 	ldw	r4,-20(fp)
  800544:	e0bffd17 	ldw	r2,-12(fp)
  800548:	10800003 	ldbu	r2,0(r2)
  80054c:	10c03fcc 	andi	r3,r2,255
  800550:	18c0201c 	xori	r3,r3,128
  800554:	18ffe004 	addi	r3,r3,-128
  800558:	e0bffd17 	ldw	r2,-12(fp)
  80055c:	10800044 	addi	r2,r2,1
  800560:	e0bffd15 	stw	r2,-12(fp)
  800564:	2005883a 	mov	r2,r4
  800568:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80056c:	e0fffd17 	ldw	r3,-12(fp)
  800570:	e0bffa17 	ldw	r2,-24(fp)
  800574:	18bfec36 	bltu	r3,r2,800528 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  800578:	e0bffe17 	ldw	r2,-8(fp)
}
  80057c:	e037883a 	mov	sp,fp
  800580:	df000017 	ldw	fp,0(sp)
  800584:	dec00104 	addi	sp,sp,4
  800588:	f800283a 	ret

0080058c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80058c:	defffa04 	addi	sp,sp,-24
  800590:	dfc00515 	stw	ra,20(sp)
  800594:	df000415 	stw	fp,16(sp)
  800598:	df000404 	addi	fp,sp,16
  80059c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8005a0:	e0bfff17 	ldw	r2,-4(fp)
  8005a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8005a8:	e0bfff17 	ldw	r2,-4(fp)
  8005ac:	10800104 	addi	r2,r2,4
  8005b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8005b4:	0005303a 	rdctl	r2,status
  8005b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8005bc:	e0fffd17 	ldw	r3,-12(fp)
  8005c0:	00bfff84 	movi	r2,-2
  8005c4:	1884703a 	and	r2,r3,r2
  8005c8:	1001703a 	wrctl	status,r2
  
  return context;
  8005cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8005d0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  8005d4:	08012c00 	call	8012c0 <alt_tick>
  8005d8:	e0bffe17 	ldw	r2,-8(fp)
  8005dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8005e0:	e0bffc17 	ldw	r2,-16(fp)
  8005e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8005e8:	e037883a 	mov	sp,fp
  8005ec:	dfc00117 	ldw	ra,4(sp)
  8005f0:	df000017 	ldw	fp,0(sp)
  8005f4:	dec00204 	addi	sp,sp,8
  8005f8:	f800283a 	ret

008005fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8005fc:	defff804 	addi	sp,sp,-32
  800600:	dfc00715 	stw	ra,28(sp)
  800604:	df000615 	stw	fp,24(sp)
  800608:	df000604 	addi	fp,sp,24
  80060c:	e13ffc15 	stw	r4,-16(fp)
  800610:	e17ffd15 	stw	r5,-12(fp)
  800614:	e1bffe15 	stw	r6,-8(fp)
  800618:	e1ffff15 	stw	r7,-4(fp)
  80061c:	e0bfff17 	ldw	r2,-4(fp)
  800620:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  800624:	00802034 	movhi	r2,128
  800628:	10864a04 	addi	r2,r2,6440
  80062c:	10800017 	ldw	r2,0(r2)
  800630:	1004c03a 	cmpne	r2,r2,zero
  800634:	1000041e 	bne	r2,zero,800648 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  800638:	00c02034 	movhi	r3,128
  80063c:	18c64a04 	addi	r3,r3,6440
  800640:	e0bffb17 	ldw	r2,-20(fp)
  800644:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  800648:	e0bffc17 	ldw	r2,-16(fp)
  80064c:	10800104 	addi	r2,r2,4
  800650:	1007883a 	mov	r3,r2
  800654:	008001c4 	movi	r2,7
  800658:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80065c:	d8000015 	stw	zero,0(sp)
  800660:	e13ffd17 	ldw	r4,-12(fp)
  800664:	e17ffe17 	ldw	r5,-8(fp)
  800668:	01802034 	movhi	r6,128
  80066c:	31816304 	addi	r6,r6,1420
  800670:	e1fffc17 	ldw	r7,-16(fp)
  800674:	0800afc0 	call	800afc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  800678:	e037883a 	mov	sp,fp
  80067c:	dfc00117 	ldw	ra,4(sp)
  800680:	df000017 	ldw	fp,0(sp)
  800684:	dec00204 	addi	sp,sp,8
  800688:	f800283a 	ret

0080068c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80068c:	defffa04 	addi	sp,sp,-24
  800690:	dfc00515 	stw	ra,20(sp)
  800694:	df000415 	stw	fp,16(sp)
  800698:	df000404 	addi	fp,sp,16
  80069c:	e13ffd15 	stw	r4,-12(fp)
  8006a0:	e17ffe15 	stw	r5,-8(fp)
  8006a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8006a8:	e0bffd17 	ldw	r2,-12(fp)
  8006ac:	10800017 	ldw	r2,0(r2)
  8006b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8006b4:	e0bffc17 	ldw	r2,-16(fp)
  8006b8:	11000a04 	addi	r4,r2,40
  8006bc:	e0bffd17 	ldw	r2,-12(fp)
  8006c0:	11c00217 	ldw	r7,8(r2)
  8006c4:	e17ffe17 	ldw	r5,-8(fp)
  8006c8:	e1bfff17 	ldw	r6,-4(fp)
  8006cc:	080073c0 	call	80073c <altera_avalon_uart_read>
      fd->fd_flags);
}
  8006d0:	e037883a 	mov	sp,fp
  8006d4:	dfc00117 	ldw	ra,4(sp)
  8006d8:	df000017 	ldw	fp,0(sp)
  8006dc:	dec00204 	addi	sp,sp,8
  8006e0:	f800283a 	ret

008006e4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8006e4:	defffa04 	addi	sp,sp,-24
  8006e8:	dfc00515 	stw	ra,20(sp)
  8006ec:	df000415 	stw	fp,16(sp)
  8006f0:	df000404 	addi	fp,sp,16
  8006f4:	e13ffd15 	stw	r4,-12(fp)
  8006f8:	e17ffe15 	stw	r5,-8(fp)
  8006fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  800700:	e0bffd17 	ldw	r2,-12(fp)
  800704:	10800017 	ldw	r2,0(r2)
  800708:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80070c:	e0bffc17 	ldw	r2,-16(fp)
  800710:	11000a04 	addi	r4,r2,40
  800714:	e0bffd17 	ldw	r2,-12(fp)
  800718:	11c00217 	ldw	r7,8(r2)
  80071c:	e17ffe17 	ldw	r5,-8(fp)
  800720:	e1bfff17 	ldw	r6,-4(fp)
  800724:	080086c0 	call	80086c <altera_avalon_uart_write>
      fd->fd_flags);
}
  800728:	e037883a 	mov	sp,fp
  80072c:	dfc00117 	ldw	ra,4(sp)
  800730:	df000017 	ldw	fp,0(sp)
  800734:	dec00204 	addi	sp,sp,8
  800738:	f800283a 	ret

0080073c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80073c:	defff704 	addi	sp,sp,-36
  800740:	dfc00815 	stw	ra,32(sp)
  800744:	df000715 	stw	fp,28(sp)
  800748:	df000704 	addi	fp,sp,28
  80074c:	e13ffb15 	stw	r4,-20(fp)
  800750:	e17ffc15 	stw	r5,-16(fp)
  800754:	e1bffd15 	stw	r6,-12(fp)
  800758:	e1fffe15 	stw	r7,-8(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
  80075c:	e0bffe17 	ldw	r2,-8(fp)
  800760:	1090000c 	andi	r2,r2,16384
  800764:	1005003a 	cmpeq	r2,r2,zero
  800768:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  80076c:	e0bffb17 	ldw	r2,-20(fp)
  800770:	10800017 	ldw	r2,0(r2)
  800774:	10800204 	addi	r2,r2,8
  800778:	10800037 	ldwio	r2,0(r2)
  80077c:	e0bff915 	stw	r2,-28(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
  800780:	e0bffb17 	ldw	r2,-20(fp)
  800784:	10800017 	ldw	r2,0(r2)
  800788:	10800204 	addi	r2,r2,8
  80078c:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
  800790:	e0bff917 	ldw	r2,-28(fp)
  800794:	1080200c 	andi	r2,r2,128
  800798:	1005003a 	cmpeq	r2,r2,zero
  80079c:	10000d1e 	bne	r2,zero,8007d4 <altera_avalon_uart_read+0x98>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8007a0:	e0bffb17 	ldw	r2,-20(fp)
  8007a4:	10800017 	ldw	r2,0(r2)
  8007a8:	10800037 	ldwio	r2,0(r2)
  8007ac:	1007883a 	mov	r3,r2
  8007b0:	e0bffc17 	ldw	r2,-16(fp)
  8007b4:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8007b8:	e0bff917 	ldw	r2,-28(fp)
  8007bc:	108000cc 	andi	r2,r2,3
  8007c0:	1004c03a 	cmpne	r2,r2,zero
  8007c4:	1000031e 	bne	r2,zero,8007d4 <altera_avalon_uart_read+0x98>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
  8007c8:	00800044 	movi	r2,1
  8007cc:	e0bfff15 	stw	r2,-4(fp)
  8007d0:	00000806 	br	8007f4 <altera_avalon_uart_read+0xb8>
      }
    }
  }
  while (block);
  8007d4:	e0bffa17 	ldw	r2,-24(fp)
  8007d8:	1004c03a 	cmpne	r2,r2,zero
  8007dc:	103fe31e 	bne	r2,zero,80076c <altera_avalon_uart_read+0x30>

  ALT_ERRNO = EWOULDBLOCK;
  8007e0:	080080c0 	call	80080c <alt_get_errno>
  8007e4:	1007883a 	mov	r3,r2
  8007e8:	008002c4 	movi	r2,11
  8007ec:	18800015 	stw	r2,0(r3)
 
  return 0;
  8007f0:	e03fff15 	stw	zero,-4(fp)
  8007f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8007f8:	e037883a 	mov	sp,fp
  8007fc:	dfc00117 	ldw	ra,4(sp)
  800800:	df000017 	ldw	fp,0(sp)
  800804:	dec00204 	addi	sp,sp,8
  800808:	f800283a 	ret

0080080c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80080c:	defffd04 	addi	sp,sp,-12
  800810:	dfc00215 	stw	ra,8(sp)
  800814:	df000115 	stw	fp,4(sp)
  800818:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80081c:	00802034 	movhi	r2,128
  800820:	10864204 	addi	r2,r2,6408
  800824:	10800017 	ldw	r2,0(r2)
  800828:	1005003a 	cmpeq	r2,r2,zero
  80082c:	1000061e 	bne	r2,zero,800848 <alt_get_errno+0x3c>
  800830:	00802034 	movhi	r2,128
  800834:	10864204 	addi	r2,r2,6408
  800838:	10800017 	ldw	r2,0(r2)
  80083c:	103ee83a 	callr	r2
  800840:	e0bfff15 	stw	r2,-4(fp)
  800844:	00000306 	br	800854 <alt_get_errno+0x48>
  800848:	00802034 	movhi	r2,128
  80084c:	10864c04 	addi	r2,r2,6448
  800850:	e0bfff15 	stw	r2,-4(fp)
  800854:	e0bfff17 	ldw	r2,-4(fp)
}
  800858:	e037883a 	mov	sp,fp
  80085c:	dfc00117 	ldw	ra,4(sp)
  800860:	df000017 	ldw	fp,0(sp)
  800864:	dec00204 	addi	sp,sp,8
  800868:	f800283a 	ret

0080086c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80086c:	defff704 	addi	sp,sp,-36
  800870:	dfc00815 	stw	ra,32(sp)
  800874:	df000715 	stw	fp,28(sp)
  800878:	df000704 	addi	fp,sp,28
  80087c:	e13ffc15 	stw	r4,-16(fp)
  800880:	e17ffd15 	stw	r5,-12(fp)
  800884:	e1bffe15 	stw	r6,-8(fp)
  800888:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
  80088c:	e0bfff17 	ldw	r2,-4(fp)
  800890:	1090000c 	andi	r2,r2,16384
  800894:	1005003a 	cmpeq	r2,r2,zero
  800898:	e0bffb15 	stw	r2,-20(fp)
  count = len;
  80089c:	e0bffe17 	ldw	r2,-8(fp)
  8008a0:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
  8008a4:	e0bffc17 	ldw	r2,-16(fp)
  8008a8:	10800017 	ldw	r2,0(r2)
  8008ac:	10800204 	addi	r2,r2,8
  8008b0:	10800037 	ldwio	r2,0(r2)
  8008b4:	e0bffa15 	stw	r2,-24(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
  8008b8:	e0bffa17 	ldw	r2,-24(fp)
  8008bc:	1080100c 	andi	r2,r2,64
  8008c0:	1005003a 	cmpeq	r2,r2,zero
  8008c4:	1000101e 	bne	r2,zero,800908 <altera_avalon_uart_write+0x9c>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
  8008c8:	e0bffc17 	ldw	r2,-16(fp)
  8008cc:	10800017 	ldw	r2,0(r2)
  8008d0:	11000104 	addi	r4,r2,4
  8008d4:	e0bffd17 	ldw	r2,-12(fp)
  8008d8:	10800003 	ldbu	r2,0(r2)
  8008dc:	10c03fcc 	andi	r3,r2,255
  8008e0:	18c0201c 	xori	r3,r3,128
  8008e4:	18ffe004 	addi	r3,r3,-128
  8008e8:	e0bffd17 	ldw	r2,-12(fp)
  8008ec:	10800044 	addi	r2,r2,1
  8008f0:	e0bffd15 	stw	r2,-12(fp)
  8008f4:	2005883a 	mov	r2,r4
  8008f8:	10c00035 	stwio	r3,0(r2)
      count--;
  8008fc:	e0bff917 	ldw	r2,-28(fp)
  800900:	10bfffc4 	addi	r2,r2,-1
  800904:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
  800908:	e0bffb17 	ldw	r2,-20(fp)
  80090c:	1005003a 	cmpeq	r2,r2,zero
  800910:	1000031e 	bne	r2,zero,800920 <altera_avalon_uart_write+0xb4>
  800914:	e0bff917 	ldw	r2,-28(fp)
  800918:	1004c03a 	cmpne	r2,r2,zero
  80091c:	103fe11e 	bne	r2,zero,8008a4 <altera_avalon_uart_write+0x38>

  if (count)
  800920:	e0bff917 	ldw	r2,-28(fp)
  800924:	1005003a 	cmpeq	r2,r2,zero
  800928:	1000041e 	bne	r2,zero,80093c <altera_avalon_uart_write+0xd0>
  {
    ALT_ERRNO = EWOULDBLOCK;
  80092c:	080095c0 	call	80095c <alt_get_errno>
  800930:	1007883a 	mov	r3,r2
  800934:	008002c4 	movi	r2,11
  800938:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
  80093c:	e0fffe17 	ldw	r3,-8(fp)
  800940:	e0bff917 	ldw	r2,-28(fp)
  800944:	1885c83a 	sub	r2,r3,r2
}
  800948:	e037883a 	mov	sp,fp
  80094c:	dfc00117 	ldw	ra,4(sp)
  800950:	df000017 	ldw	fp,0(sp)
  800954:	dec00204 	addi	sp,sp,8
  800958:	f800283a 	ret

0080095c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80095c:	defffd04 	addi	sp,sp,-12
  800960:	dfc00215 	stw	ra,8(sp)
  800964:	df000115 	stw	fp,4(sp)
  800968:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80096c:	00802034 	movhi	r2,128
  800970:	10864204 	addi	r2,r2,6408
  800974:	10800017 	ldw	r2,0(r2)
  800978:	1005003a 	cmpeq	r2,r2,zero
  80097c:	1000061e 	bne	r2,zero,800998 <alt_get_errno+0x3c>
  800980:	00802034 	movhi	r2,128
  800984:	10864204 	addi	r2,r2,6408
  800988:	10800017 	ldw	r2,0(r2)
  80098c:	103ee83a 	callr	r2
  800990:	e0bfff15 	stw	r2,-4(fp)
  800994:	00000306 	br	8009a4 <alt_get_errno+0x48>
  800998:	00802034 	movhi	r2,128
  80099c:	10864c04 	addi	r2,r2,6448
  8009a0:	e0bfff15 	stw	r2,-4(fp)
  8009a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8009a8:	e037883a 	mov	sp,fp
  8009ac:	dfc00117 	ldw	ra,4(sp)
  8009b0:	df000017 	ldw	fp,0(sp)
  8009b4:	dec00204 	addi	sp,sp,8
  8009b8:	f800283a 	ret

008009bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8009bc:	defffc04 	addi	sp,sp,-16
  8009c0:	df000315 	stw	fp,12(sp)
  8009c4:	df000304 	addi	fp,sp,12
  8009c8:	e13ffd15 	stw	r4,-12(fp)
  8009cc:	e17ffe15 	stw	r5,-8(fp)
  8009d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8009d4:	e0bfff17 	ldw	r2,-4(fp)
}
  8009d8:	e037883a 	mov	sp,fp
  8009dc:	df000017 	ldw	fp,0(sp)
  8009e0:	dec00104 	addi	sp,sp,4
  8009e4:	f800283a 	ret

008009e8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  8009e8:	defff904 	addi	sp,sp,-28
  8009ec:	dfc00615 	stw	ra,24(sp)
  8009f0:	df000515 	stw	fp,20(sp)
  8009f4:	df000504 	addi	fp,sp,20
  8009f8:	e13ffd15 	stw	r4,-12(fp)
  8009fc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  800a00:	e0bffd17 	ldw	r2,-12(fp)
  800a04:	1005003a 	cmpeq	r2,r2,zero
  800a08:	1000041e 	bne	r2,zero,800a1c <alt_dev_llist_insert+0x34>
  800a0c:	e0bffd17 	ldw	r2,-12(fp)
  800a10:	10800217 	ldw	r2,8(r2)
  800a14:	1004c03a 	cmpne	r2,r2,zero
  800a18:	1000071e 	bne	r2,zero,800a38 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  800a1c:	0800a9c0 	call	800a9c <alt_get_errno>
  800a20:	1007883a 	mov	r3,r2
  800a24:	00800584 	movi	r2,22
  800a28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  800a2c:	00bffa84 	movi	r2,-22
  800a30:	e0bfff15 	stw	r2,-4(fp)
  800a34:	00001306 	br	800a84 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  800a38:	e0fffd17 	ldw	r3,-12(fp)
  800a3c:	e0bffe17 	ldw	r2,-8(fp)
  800a40:	e0bffb15 	stw	r2,-20(fp)
  800a44:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  800a48:	e0fffc17 	ldw	r3,-16(fp)
  800a4c:	e0bffb17 	ldw	r2,-20(fp)
  800a50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  800a54:	e0bffb17 	ldw	r2,-20(fp)
  800a58:	10c00017 	ldw	r3,0(r2)
  800a5c:	e0bffc17 	ldw	r2,-16(fp)
  800a60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  800a64:	e0bffb17 	ldw	r2,-20(fp)
  800a68:	10c00017 	ldw	r3,0(r2)
  800a6c:	e0bffc17 	ldw	r2,-16(fp)
  800a70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  800a74:	e0fffb17 	ldw	r3,-20(fp)
  800a78:	e0bffc17 	ldw	r2,-16(fp)
  800a7c:	18800015 	stw	r2,0(r3)

  return 0;  
  800a80:	e03fff15 	stw	zero,-4(fp)
  800a84:	e0bfff17 	ldw	r2,-4(fp)
}
  800a88:	e037883a 	mov	sp,fp
  800a8c:	dfc00117 	ldw	ra,4(sp)
  800a90:	df000017 	ldw	fp,0(sp)
  800a94:	dec00204 	addi	sp,sp,8
  800a98:	f800283a 	ret

00800a9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  800a9c:	defffd04 	addi	sp,sp,-12
  800aa0:	dfc00215 	stw	ra,8(sp)
  800aa4:	df000115 	stw	fp,4(sp)
  800aa8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  800aac:	00802034 	movhi	r2,128
  800ab0:	10864204 	addi	r2,r2,6408
  800ab4:	10800017 	ldw	r2,0(r2)
  800ab8:	1005003a 	cmpeq	r2,r2,zero
  800abc:	1000061e 	bne	r2,zero,800ad8 <alt_get_errno+0x3c>
  800ac0:	00802034 	movhi	r2,128
  800ac4:	10864204 	addi	r2,r2,6408
  800ac8:	10800017 	ldw	r2,0(r2)
  800acc:	103ee83a 	callr	r2
  800ad0:	e0bfff15 	stw	r2,-4(fp)
  800ad4:	00000306 	br	800ae4 <alt_get_errno+0x48>
  800ad8:	00802034 	movhi	r2,128
  800adc:	10864c04 	addi	r2,r2,6448
  800ae0:	e0bfff15 	stw	r2,-4(fp)
  800ae4:	e0bfff17 	ldw	r2,-4(fp)
}
  800ae8:	e037883a 	mov	sp,fp
  800aec:	dfc00117 	ldw	ra,4(sp)
  800af0:	df000017 	ldw	fp,0(sp)
  800af4:	dec00204 	addi	sp,sp,8
  800af8:	f800283a 	ret

00800afc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  800afc:	defff904 	addi	sp,sp,-28
  800b00:	dfc00615 	stw	ra,24(sp)
  800b04:	df000515 	stw	fp,20(sp)
  800b08:	df000504 	addi	fp,sp,20
  800b0c:	e13ffc15 	stw	r4,-16(fp)
  800b10:	e17ffd15 	stw	r5,-12(fp)
  800b14:	e1bffe15 	stw	r6,-8(fp)
  800b18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  800b1c:	e0800217 	ldw	r2,8(fp)
  800b20:	d8800015 	stw	r2,0(sp)
  800b24:	e13ffc17 	ldw	r4,-16(fp)
  800b28:	e17ffd17 	ldw	r5,-12(fp)
  800b2c:	e1bffe17 	ldw	r6,-8(fp)
  800b30:	e1ffff17 	ldw	r7,-4(fp)
  800b34:	0800cd00 	call	800cd0 <alt_iic_isr_register>
}  
  800b38:	e037883a 	mov	sp,fp
  800b3c:	dfc00117 	ldw	ra,4(sp)
  800b40:	df000017 	ldw	fp,0(sp)
  800b44:	dec00204 	addi	sp,sp,8
  800b48:	f800283a 	ret

00800b4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  800b4c:	defff904 	addi	sp,sp,-28
  800b50:	df000615 	stw	fp,24(sp)
  800b54:	df000604 	addi	fp,sp,24
  800b58:	e13ffe15 	stw	r4,-8(fp)
  800b5c:	e17fff15 	stw	r5,-4(fp)
  800b60:	e0bfff17 	ldw	r2,-4(fp)
  800b64:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800b68:	0005303a 	rdctl	r2,status
  800b6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800b70:	e0fffb17 	ldw	r3,-20(fp)
  800b74:	00bfff84 	movi	r2,-2
  800b78:	1884703a 	and	r2,r3,r2
  800b7c:	1001703a 	wrctl	status,r2
  
  return context;
  800b80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800b84:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  800b88:	e0fffc17 	ldw	r3,-16(fp)
  800b8c:	00800044 	movi	r2,1
  800b90:	10c4983a 	sll	r2,r2,r3
  800b94:	1007883a 	mov	r3,r2
  800b98:	00802034 	movhi	r2,128
  800b9c:	10864904 	addi	r2,r2,6436
  800ba0:	10800017 	ldw	r2,0(r2)
  800ba4:	1886b03a 	or	r3,r3,r2
  800ba8:	00802034 	movhi	r2,128
  800bac:	10864904 	addi	r2,r2,6436
  800bb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800bb4:	00802034 	movhi	r2,128
  800bb8:	10864904 	addi	r2,r2,6436
  800bbc:	10800017 	ldw	r2,0(r2)
  800bc0:	100170fa 	wrctl	ienable,r2
  800bc4:	e0bffd17 	ldw	r2,-12(fp)
  800bc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800bcc:	e0bffa17 	ldw	r2,-24(fp)
  800bd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  800bd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  800bd8:	e037883a 	mov	sp,fp
  800bdc:	df000017 	ldw	fp,0(sp)
  800be0:	dec00104 	addi	sp,sp,4
  800be4:	f800283a 	ret

00800be8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  800be8:	defff904 	addi	sp,sp,-28
  800bec:	df000615 	stw	fp,24(sp)
  800bf0:	df000604 	addi	fp,sp,24
  800bf4:	e13ffe15 	stw	r4,-8(fp)
  800bf8:	e17fff15 	stw	r5,-4(fp)
  800bfc:	e0bfff17 	ldw	r2,-4(fp)
  800c00:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800c04:	0005303a 	rdctl	r2,status
  800c08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800c0c:	e0fffb17 	ldw	r3,-20(fp)
  800c10:	00bfff84 	movi	r2,-2
  800c14:	1884703a 	and	r2,r3,r2
  800c18:	1001703a 	wrctl	status,r2
  
  return context;
  800c1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  800c20:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  800c24:	e0fffc17 	ldw	r3,-16(fp)
  800c28:	00800044 	movi	r2,1
  800c2c:	10c4983a 	sll	r2,r2,r3
  800c30:	0084303a 	nor	r2,zero,r2
  800c34:	1007883a 	mov	r3,r2
  800c38:	00802034 	movhi	r2,128
  800c3c:	10864904 	addi	r2,r2,6436
  800c40:	10800017 	ldw	r2,0(r2)
  800c44:	1886703a 	and	r3,r3,r2
  800c48:	00802034 	movhi	r2,128
  800c4c:	10864904 	addi	r2,r2,6436
  800c50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  800c54:	00802034 	movhi	r2,128
  800c58:	10864904 	addi	r2,r2,6436
  800c5c:	10800017 	ldw	r2,0(r2)
  800c60:	100170fa 	wrctl	ienable,r2
  800c64:	e0bffd17 	ldw	r2,-12(fp)
  800c68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800c6c:	e0bffa17 	ldw	r2,-24(fp)
  800c70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  800c74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  800c78:	e037883a 	mov	sp,fp
  800c7c:	df000017 	ldw	fp,0(sp)
  800c80:	dec00104 	addi	sp,sp,4
  800c84:	f800283a 	ret

00800c88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  800c88:	defffc04 	addi	sp,sp,-16
  800c8c:	df000315 	stw	fp,12(sp)
  800c90:	df000304 	addi	fp,sp,12
  800c94:	e13ffe15 	stw	r4,-8(fp)
  800c98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  800c9c:	000530fa 	rdctl	r2,ienable
  800ca0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  800ca4:	e0ffff17 	ldw	r3,-4(fp)
  800ca8:	00800044 	movi	r2,1
  800cac:	10c4983a 	sll	r2,r2,r3
  800cb0:	1007883a 	mov	r3,r2
  800cb4:	e0bffd17 	ldw	r2,-12(fp)
  800cb8:	1884703a 	and	r2,r3,r2
  800cbc:	1004c03a 	cmpne	r2,r2,zero
}
  800cc0:	e037883a 	mov	sp,fp
  800cc4:	df000017 	ldw	fp,0(sp)
  800cc8:	dec00104 	addi	sp,sp,4
  800ccc:	f800283a 	ret

00800cd0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  800cd0:	defff404 	addi	sp,sp,-48
  800cd4:	dfc00b15 	stw	ra,44(sp)
  800cd8:	df000a15 	stw	fp,40(sp)
  800cdc:	df000a04 	addi	fp,sp,40
  800ce0:	e13ffb15 	stw	r4,-20(fp)
  800ce4:	e17ffc15 	stw	r5,-16(fp)
  800ce8:	e1bffd15 	stw	r6,-12(fp)
  800cec:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  800cf0:	00bffa84 	movi	r2,-22
  800cf4:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  800cf8:	e0bffc17 	ldw	r2,-16(fp)
  800cfc:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  800d00:	e0bff917 	ldw	r2,-28(fp)
  800d04:	10800808 	cmpgei	r2,r2,32
  800d08:	1000291e 	bne	r2,zero,800db0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800d0c:	0005303a 	rdctl	r2,status
  800d10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800d14:	e0fff717 	ldw	r3,-36(fp)
  800d18:	00bfff84 	movi	r2,-2
  800d1c:	1884703a 	and	r2,r3,r2
  800d20:	1001703a 	wrctl	status,r2
  
  return context;
  800d24:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  800d28:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  800d2c:	e0bff917 	ldw	r2,-28(fp)
  800d30:	00c02034 	movhi	r3,128
  800d34:	18c64d04 	addi	r3,r3,6452
  800d38:	100490fa 	slli	r2,r2,3
  800d3c:	10c7883a 	add	r3,r2,r3
  800d40:	e0bffd17 	ldw	r2,-12(fp)
  800d44:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  800d48:	e0bff917 	ldw	r2,-28(fp)
  800d4c:	00c02034 	movhi	r3,128
  800d50:	18c64d04 	addi	r3,r3,6452
  800d54:	100490fa 	slli	r2,r2,3
  800d58:	10c5883a 	add	r2,r2,r3
  800d5c:	10c00104 	addi	r3,r2,4
  800d60:	e0bffe17 	ldw	r2,-8(fp)
  800d64:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  800d68:	e0bffd17 	ldw	r2,-12(fp)
  800d6c:	1005003a 	cmpeq	r2,r2,zero
  800d70:	1000051e 	bne	r2,zero,800d88 <alt_iic_isr_register+0xb8>
  800d74:	e17ff917 	ldw	r5,-28(fp)
  800d78:	e13ffb17 	ldw	r4,-20(fp)
  800d7c:	0800b4c0 	call	800b4c <alt_ic_irq_enable>
  800d80:	e0bfff15 	stw	r2,-4(fp)
  800d84:	00000406 	br	800d98 <alt_iic_isr_register+0xc8>
  800d88:	e17ff917 	ldw	r5,-28(fp)
  800d8c:	e13ffb17 	ldw	r4,-20(fp)
  800d90:	0800be80 	call	800be8 <alt_ic_irq_disable>
  800d94:	e0bfff15 	stw	r2,-4(fp)
  800d98:	e0bfff17 	ldw	r2,-4(fp)
  800d9c:	e0bffa15 	stw	r2,-24(fp)
  800da0:	e0bff817 	ldw	r2,-32(fp)
  800da4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800da8:	e0bff617 	ldw	r2,-40(fp)
  800dac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  800db0:	e0bffa17 	ldw	r2,-24(fp)
}
  800db4:	e037883a 	mov	sp,fp
  800db8:	dfc00117 	ldw	ra,4(sp)
  800dbc:	df000017 	ldw	fp,0(sp)
  800dc0:	dec00204 	addi	sp,sp,8
  800dc4:	f800283a 	ret

00800dc8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  800dc8:	defff904 	addi	sp,sp,-28
  800dcc:	dfc00615 	stw	ra,24(sp)
  800dd0:	df000515 	stw	fp,20(sp)
  800dd4:	df000504 	addi	fp,sp,20
  800dd8:	e13ffc15 	stw	r4,-16(fp)
  800ddc:	e17ffd15 	stw	r5,-12(fp)
  800de0:	e1bffe15 	stw	r6,-8(fp)
  800de4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  800de8:	e13ffd17 	ldw	r4,-12(fp)
  800dec:	e17ffe17 	ldw	r5,-8(fp)
  800df0:	e1bfff17 	ldw	r6,-4(fp)
  800df4:	0800fe00 	call	800fe0 <open>
  800df8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  800dfc:	e0bffb17 	ldw	r2,-20(fp)
  800e00:	1004803a 	cmplt	r2,r2,zero
  800e04:	10001c1e 	bne	r2,zero,800e78 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  800e08:	e0bffb17 	ldw	r2,-20(fp)
  800e0c:	00c02034 	movhi	r3,128
  800e10:	18c5dd04 	addi	r3,r3,6004
  800e14:	10800324 	muli	r2,r2,12
  800e18:	10c5883a 	add	r2,r2,r3
  800e1c:	10c00017 	ldw	r3,0(r2)
  800e20:	e0bffc17 	ldw	r2,-16(fp)
  800e24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  800e28:	e0bffb17 	ldw	r2,-20(fp)
  800e2c:	00c02034 	movhi	r3,128
  800e30:	18c5dd04 	addi	r3,r3,6004
  800e34:	10800324 	muli	r2,r2,12
  800e38:	10c5883a 	add	r2,r2,r3
  800e3c:	10800104 	addi	r2,r2,4
  800e40:	10c00017 	ldw	r3,0(r2)
  800e44:	e0bffc17 	ldw	r2,-16(fp)
  800e48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  800e4c:	e0bffb17 	ldw	r2,-20(fp)
  800e50:	00c02034 	movhi	r3,128
  800e54:	18c5dd04 	addi	r3,r3,6004
  800e58:	10800324 	muli	r2,r2,12
  800e5c:	10c5883a 	add	r2,r2,r3
  800e60:	10800204 	addi	r2,r2,8
  800e64:	10c00017 	ldw	r3,0(r2)
  800e68:	e0bffc17 	ldw	r2,-16(fp)
  800e6c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  800e70:	e13ffb17 	ldw	r4,-20(fp)
  800e74:	08011c80 	call	8011c8 <alt_release_fd>
  }
} 
  800e78:	e037883a 	mov	sp,fp
  800e7c:	dfc00117 	ldw	ra,4(sp)
  800e80:	df000017 	ldw	fp,0(sp)
  800e84:	dec00204 	addi	sp,sp,8
  800e88:	f800283a 	ret

00800e8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  800e8c:	defffb04 	addi	sp,sp,-20
  800e90:	dfc00415 	stw	ra,16(sp)
  800e94:	df000315 	stw	fp,12(sp)
  800e98:	df000304 	addi	fp,sp,12
  800e9c:	e13ffd15 	stw	r4,-12(fp)
  800ea0:	e17ffe15 	stw	r5,-8(fp)
  800ea4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  800ea8:	01002034 	movhi	r4,128
  800eac:	2105e004 	addi	r4,r4,6016
  800eb0:	e17ffd17 	ldw	r5,-12(fp)
  800eb4:	01800044 	movi	r6,1
  800eb8:	01c07fc4 	movi	r7,511
  800ebc:	0800dc80 	call	800dc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  800ec0:	01002034 	movhi	r4,128
  800ec4:	2105dd04 	addi	r4,r4,6004
  800ec8:	e17ffe17 	ldw	r5,-8(fp)
  800ecc:	000d883a 	mov	r6,zero
  800ed0:	01c07fc4 	movi	r7,511
  800ed4:	0800dc80 	call	800dc8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  800ed8:	01002034 	movhi	r4,128
  800edc:	2105e304 	addi	r4,r4,6028
  800ee0:	e17fff17 	ldw	r5,-4(fp)
  800ee4:	01800044 	movi	r6,1
  800ee8:	01c07fc4 	movi	r7,511
  800eec:	0800dc80 	call	800dc8 <alt_open_fd>
}  
  800ef0:	e037883a 	mov	sp,fp
  800ef4:	dfc00117 	ldw	ra,4(sp)
  800ef8:	df000017 	ldw	fp,0(sp)
  800efc:	dec00204 	addi	sp,sp,8
  800f00:	f800283a 	ret

00800f04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  800f04:	defffc04 	addi	sp,sp,-16
  800f08:	df000315 	stw	fp,12(sp)
  800f0c:	df000304 	addi	fp,sp,12
  800f10:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  800f14:	e0bffe17 	ldw	r2,-8(fp)
  800f18:	10800217 	ldw	r2,8(r2)
  800f1c:	10d00034 	orhi	r3,r2,16384
  800f20:	e0bffe17 	ldw	r2,-8(fp)
  800f24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800f28:	e03ffd15 	stw	zero,-12(fp)
  800f2c:	00002006 	br	800fb0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  800f30:	e0bffd17 	ldw	r2,-12(fp)
  800f34:	00c02034 	movhi	r3,128
  800f38:	18c5dd04 	addi	r3,r3,6004
  800f3c:	10800324 	muli	r2,r2,12
  800f40:	10c5883a 	add	r2,r2,r3
  800f44:	10c00017 	ldw	r3,0(r2)
  800f48:	e0bffe17 	ldw	r2,-8(fp)
  800f4c:	10800017 	ldw	r2,0(r2)
  800f50:	1880141e 	bne	r3,r2,800fa4 <alt_file_locked+0xa0>
  800f54:	e0bffd17 	ldw	r2,-12(fp)
  800f58:	00c02034 	movhi	r3,128
  800f5c:	18c5dd04 	addi	r3,r3,6004
  800f60:	10800324 	muli	r2,r2,12
  800f64:	10c5883a 	add	r2,r2,r3
  800f68:	10800204 	addi	r2,r2,8
  800f6c:	10800017 	ldw	r2,0(r2)
  800f70:	1004403a 	cmpge	r2,r2,zero
  800f74:	10000b1e 	bne	r2,zero,800fa4 <alt_file_locked+0xa0>
  800f78:	e0bffd17 	ldw	r2,-12(fp)
  800f7c:	10800324 	muli	r2,r2,12
  800f80:	1007883a 	mov	r3,r2
  800f84:	00802034 	movhi	r2,128
  800f88:	1085dd04 	addi	r2,r2,6004
  800f8c:	1887883a 	add	r3,r3,r2
  800f90:	e0bffe17 	ldw	r2,-8(fp)
  800f94:	18800326 	beq	r3,r2,800fa4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  800f98:	00bffcc4 	movi	r2,-13
  800f9c:	e0bfff15 	stw	r2,-4(fp)
  800fa0:	00000a06 	br	800fcc <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  800fa4:	e0bffd17 	ldw	r2,-12(fp)
  800fa8:	10800044 	addi	r2,r2,1
  800fac:	e0bffd15 	stw	r2,-12(fp)
  800fb0:	00802034 	movhi	r2,128
  800fb4:	10864104 	addi	r2,r2,6404
  800fb8:	10800017 	ldw	r2,0(r2)
  800fbc:	1007883a 	mov	r3,r2
  800fc0:	e0bffd17 	ldw	r2,-12(fp)
  800fc4:	18bfda2e 	bgeu	r3,r2,800f30 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  800fc8:	e03fff15 	stw	zero,-4(fp)
  800fcc:	e0bfff17 	ldw	r2,-4(fp)
}
  800fd0:	e037883a 	mov	sp,fp
  800fd4:	df000017 	ldw	fp,0(sp)
  800fd8:	dec00104 	addi	sp,sp,4
  800fdc:	f800283a 	ret

00800fe0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  800fe0:	defff404 	addi	sp,sp,-48
  800fe4:	dfc00b15 	stw	ra,44(sp)
  800fe8:	df000a15 	stw	fp,40(sp)
  800fec:	df000a04 	addi	fp,sp,40
  800ff0:	e13ffb15 	stw	r4,-20(fp)
  800ff4:	e17ffc15 	stw	r5,-16(fp)
  800ff8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  800ffc:	00bfffc4 	movi	r2,-1
  801000:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  801004:	00bffb44 	movi	r2,-19
  801008:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80100c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  801010:	e13ffb17 	ldw	r4,-20(fp)
  801014:	01402034 	movhi	r5,128
  801018:	29463f04 	addi	r5,r5,6396
  80101c:	08013ec0 	call	8013ec <alt_find_dev>
  801020:	e0bffa15 	stw	r2,-24(fp)
  801024:	e0bffa17 	ldw	r2,-24(fp)
  801028:	1004c03a 	cmpne	r2,r2,zero
  80102c:	1000051e 	bne	r2,zero,801044 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  801030:	e13ffb17 	ldw	r4,-20(fp)
  801034:	08014800 	call	801480 <alt_find_file>
  801038:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80103c:	00800044 	movi	r2,1
  801040:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  801044:	e0bffa17 	ldw	r2,-24(fp)
  801048:	1005003a 	cmpeq	r2,r2,zero
  80104c:	1000301e 	bne	r2,zero,801110 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  801050:	e13ffa17 	ldw	r4,-24(fp)
  801054:	08015a00 	call	8015a0 <alt_get_fd>
  801058:	e0bff815 	stw	r2,-32(fp)
  80105c:	e0bff817 	ldw	r2,-32(fp)
  801060:	1004403a 	cmpge	r2,r2,zero
  801064:	1000031e 	bne	r2,zero,801074 <open+0x94>
    {
      status = index;
  801068:	e0bff817 	ldw	r2,-32(fp)
  80106c:	e0bff715 	stw	r2,-36(fp)
  801070:	00002906 	br	801118 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  801074:	e0bff817 	ldw	r2,-32(fp)
  801078:	10800324 	muli	r2,r2,12
  80107c:	1007883a 	mov	r3,r2
  801080:	00802034 	movhi	r2,128
  801084:	1085dd04 	addi	r2,r2,6004
  801088:	1885883a 	add	r2,r3,r2
  80108c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  801090:	e0fffc17 	ldw	r3,-16(fp)
  801094:	00900034 	movhi	r2,16384
  801098:	10bfffc4 	addi	r2,r2,-1
  80109c:	1886703a 	and	r3,r3,r2
  8010a0:	e0bff917 	ldw	r2,-28(fp)
  8010a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8010a8:	e0bff617 	ldw	r2,-40(fp)
  8010ac:	1004c03a 	cmpne	r2,r2,zero
  8010b0:	1000061e 	bne	r2,zero,8010cc <open+0xec>
  8010b4:	e13ff917 	ldw	r4,-28(fp)
  8010b8:	0800f040 	call	800f04 <alt_file_locked>
  8010bc:	e0bff715 	stw	r2,-36(fp)
  8010c0:	e0bff717 	ldw	r2,-36(fp)
  8010c4:	1004803a 	cmplt	r2,r2,zero
  8010c8:	1000131e 	bne	r2,zero,801118 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8010cc:	e0bffa17 	ldw	r2,-24(fp)
  8010d0:	10800317 	ldw	r2,12(r2)
  8010d4:	1005003a 	cmpeq	r2,r2,zero
  8010d8:	1000091e 	bne	r2,zero,801100 <open+0x120>
  8010dc:	e0bffa17 	ldw	r2,-24(fp)
  8010e0:	10800317 	ldw	r2,12(r2)
  8010e4:	e13ff917 	ldw	r4,-28(fp)
  8010e8:	e17ffb17 	ldw	r5,-20(fp)
  8010ec:	e1bffc17 	ldw	r6,-16(fp)
  8010f0:	e1fffd17 	ldw	r7,-12(fp)
  8010f4:	103ee83a 	callr	r2
  8010f8:	e0bfff15 	stw	r2,-4(fp)
  8010fc:	00000106 	br	801104 <open+0x124>
  801100:	e03fff15 	stw	zero,-4(fp)
  801104:	e0bfff17 	ldw	r2,-4(fp)
  801108:	e0bff715 	stw	r2,-36(fp)
  80110c:	00000206 	br	801118 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  801110:	00bffb44 	movi	r2,-19
  801114:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  801118:	e0bff717 	ldw	r2,-36(fp)
  80111c:	1004403a 	cmpge	r2,r2,zero
  801120:	1000091e 	bne	r2,zero,801148 <open+0x168>
  {
    alt_release_fd (index);  
  801124:	e13ff817 	ldw	r4,-32(fp)
  801128:	08011c80 	call	8011c8 <alt_release_fd>
    ALT_ERRNO = -status;
  80112c:	08011680 	call	801168 <alt_get_errno>
  801130:	e0fff717 	ldw	r3,-36(fp)
  801134:	00c7c83a 	sub	r3,zero,r3
  801138:	10c00015 	stw	r3,0(r2)
    return -1;
  80113c:	00bfffc4 	movi	r2,-1
  801140:	e0bffe15 	stw	r2,-8(fp)
  801144:	00000206 	br	801150 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  801148:	e0bff817 	ldw	r2,-32(fp)
  80114c:	e0bffe15 	stw	r2,-8(fp)
  801150:	e0bffe17 	ldw	r2,-8(fp)
}
  801154:	e037883a 	mov	sp,fp
  801158:	dfc00117 	ldw	ra,4(sp)
  80115c:	df000017 	ldw	fp,0(sp)
  801160:	dec00204 	addi	sp,sp,8
  801164:	f800283a 	ret

00801168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  801168:	defffd04 	addi	sp,sp,-12
  80116c:	dfc00215 	stw	ra,8(sp)
  801170:	df000115 	stw	fp,4(sp)
  801174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  801178:	00802034 	movhi	r2,128
  80117c:	10864204 	addi	r2,r2,6408
  801180:	10800017 	ldw	r2,0(r2)
  801184:	1005003a 	cmpeq	r2,r2,zero
  801188:	1000061e 	bne	r2,zero,8011a4 <alt_get_errno+0x3c>
  80118c:	00802034 	movhi	r2,128
  801190:	10864204 	addi	r2,r2,6408
  801194:	10800017 	ldw	r2,0(r2)
  801198:	103ee83a 	callr	r2
  80119c:	e0bfff15 	stw	r2,-4(fp)
  8011a0:	00000306 	br	8011b0 <alt_get_errno+0x48>
  8011a4:	00802034 	movhi	r2,128
  8011a8:	10864c04 	addi	r2,r2,6448
  8011ac:	e0bfff15 	stw	r2,-4(fp)
  8011b0:	e0bfff17 	ldw	r2,-4(fp)
}
  8011b4:	e037883a 	mov	sp,fp
  8011b8:	dfc00117 	ldw	ra,4(sp)
  8011bc:	df000017 	ldw	fp,0(sp)
  8011c0:	dec00204 	addi	sp,sp,8
  8011c4:	f800283a 	ret

008011c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8011c8:	defffe04 	addi	sp,sp,-8
  8011cc:	df000115 	stw	fp,4(sp)
  8011d0:	df000104 	addi	fp,sp,4
  8011d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8011d8:	e0bfff17 	ldw	r2,-4(fp)
  8011dc:	108000d0 	cmplti	r2,r2,3
  8011e0:	10000d1e 	bne	r2,zero,801218 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8011e4:	e0bfff17 	ldw	r2,-4(fp)
  8011e8:	00c02034 	movhi	r3,128
  8011ec:	18c5dd04 	addi	r3,r3,6004
  8011f0:	10800324 	muli	r2,r2,12
  8011f4:	10c5883a 	add	r2,r2,r3
  8011f8:	10800204 	addi	r2,r2,8
  8011fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  801200:	e0bfff17 	ldw	r2,-4(fp)
  801204:	00c02034 	movhi	r3,128
  801208:	18c5dd04 	addi	r3,r3,6004
  80120c:	10800324 	muli	r2,r2,12
  801210:	10c5883a 	add	r2,r2,r3
  801214:	10000015 	stw	zero,0(r2)
  }
}
  801218:	e037883a 	mov	sp,fp
  80121c:	df000017 	ldw	fp,0(sp)
  801220:	dec00104 	addi	sp,sp,4
  801224:	f800283a 	ret

00801228 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  801228:	defffa04 	addi	sp,sp,-24
  80122c:	df000515 	stw	fp,20(sp)
  801230:	df000504 	addi	fp,sp,20
  801234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801238:	0005303a 	rdctl	r2,status
  80123c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801240:	e0fffd17 	ldw	r3,-12(fp)
  801244:	00bfff84 	movi	r2,-2
  801248:	1884703a 	and	r2,r3,r2
  80124c:	1001703a 	wrctl	status,r2
  
  return context;
  801250:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  801254:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  801258:	e0bfff17 	ldw	r2,-4(fp)
  80125c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  801260:	e0bffc17 	ldw	r2,-16(fp)
  801264:	10c00017 	ldw	r3,0(r2)
  801268:	e0bffc17 	ldw	r2,-16(fp)
  80126c:	10800117 	ldw	r2,4(r2)
  801270:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  801274:	e0bffc17 	ldw	r2,-16(fp)
  801278:	10c00117 	ldw	r3,4(r2)
  80127c:	e0bffc17 	ldw	r2,-16(fp)
  801280:	10800017 	ldw	r2,0(r2)
  801284:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  801288:	e0fffc17 	ldw	r3,-16(fp)
  80128c:	e0bffc17 	ldw	r2,-16(fp)
  801290:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  801294:	e0fffc17 	ldw	r3,-16(fp)
  801298:	e0bffc17 	ldw	r2,-16(fp)
  80129c:	18800015 	stw	r2,0(r3)
  8012a0:	e0bffe17 	ldw	r2,-8(fp)
  8012a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8012a8:	e0bffb17 	ldw	r2,-20(fp)
  8012ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8012b0:	e037883a 	mov	sp,fp
  8012b4:	df000017 	ldw	fp,0(sp)
  8012b8:	dec00104 	addi	sp,sp,4
  8012bc:	f800283a 	ret

008012c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8012c0:	defffb04 	addi	sp,sp,-20
  8012c4:	dfc00415 	stw	ra,16(sp)
  8012c8:	df000315 	stw	fp,12(sp)
  8012cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8012d0:	d0a00717 	ldw	r2,-32740(gp)
  8012d4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8012d8:	d0a00e17 	ldw	r2,-32712(gp)
  8012dc:	10800044 	addi	r2,r2,1
  8012e0:	d0a00e15 	stw	r2,-32712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8012e4:	00003106 	br	8013ac <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  8012e8:	e0bffe17 	ldw	r2,-8(fp)
  8012ec:	10800017 	ldw	r2,0(r2)
  8012f0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8012f4:	e0bffe17 	ldw	r2,-8(fp)
  8012f8:	10800403 	ldbu	r2,16(r2)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1005003a 	cmpeq	r2,r2,zero
  801304:	1000051e 	bne	r2,zero,80131c <alt_tick+0x5c>
  801308:	d0a00e17 	ldw	r2,-32712(gp)
  80130c:	1004c03a 	cmpne	r2,r2,zero
  801310:	1000021e 	bne	r2,zero,80131c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  801314:	e0bffe17 	ldw	r2,-8(fp)
  801318:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80131c:	e0bffe17 	ldw	r2,-8(fp)
  801320:	10c00217 	ldw	r3,8(r2)
  801324:	d0a00e17 	ldw	r2,-32712(gp)
  801328:	10c01e36 	bltu	r2,r3,8013a4 <alt_tick+0xe4>
  80132c:	e0bffe17 	ldw	r2,-8(fp)
  801330:	10800403 	ldbu	r2,16(r2)
  801334:	10803fcc 	andi	r2,r2,255
  801338:	1004c03a 	cmpne	r2,r2,zero
  80133c:	1000191e 	bne	r2,zero,8013a4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  801340:	e0bffe17 	ldw	r2,-8(fp)
  801344:	10c00317 	ldw	r3,12(r2)
  801348:	e0bffe17 	ldw	r2,-8(fp)
  80134c:	11000517 	ldw	r4,20(r2)
  801350:	183ee83a 	callr	r3
  801354:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  801358:	e0bffd17 	ldw	r2,-12(fp)
  80135c:	1004c03a 	cmpne	r2,r2,zero
  801360:	1000031e 	bne	r2,zero,801370 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  801364:	e13ffe17 	ldw	r4,-8(fp)
  801368:	08012280 	call	801228 <alt_alarm_stop>
  80136c:	00000d06 	br	8013a4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  801370:	e0bffe17 	ldw	r2,-8(fp)
  801374:	10c00217 	ldw	r3,8(r2)
  801378:	e0bffd17 	ldw	r2,-12(fp)
  80137c:	1887883a 	add	r3,r3,r2
  801380:	e0bffe17 	ldw	r2,-8(fp)
  801384:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  801388:	e0bffe17 	ldw	r2,-8(fp)
  80138c:	10c00217 	ldw	r3,8(r2)
  801390:	d0a00e17 	ldw	r2,-32712(gp)
  801394:	1880032e 	bgeu	r3,r2,8013a4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  801398:	e0fffe17 	ldw	r3,-8(fp)
  80139c:	00800044 	movi	r2,1
  8013a0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8013a4:	e0bfff17 	ldw	r2,-4(fp)
  8013a8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8013ac:	d0e00704 	addi	r3,gp,-32740
  8013b0:	e0bffe17 	ldw	r2,-8(fp)
  8013b4:	10ffcc1e 	bne	r2,r3,8012e8 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  8013b8:	e037883a 	mov	sp,fp
  8013bc:	dfc00117 	ldw	ra,4(sp)
  8013c0:	df000017 	ldw	fp,0(sp)
  8013c4:	dec00204 	addi	sp,sp,8
  8013c8:	f800283a 	ret

008013cc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  8013cc:	deffff04 	addi	sp,sp,-4
  8013d0:	df000015 	stw	fp,0(sp)
  8013d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  8013d8:	000170fa 	wrctl	ienable,zero
}
  8013dc:	e037883a 	mov	sp,fp
  8013e0:	df000017 	ldw	fp,0(sp)
  8013e4:	dec00104 	addi	sp,sp,4
  8013e8:	f800283a 	ret

008013ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8013ec:	defff904 	addi	sp,sp,-28
  8013f0:	dfc00615 	stw	ra,24(sp)
  8013f4:	df000515 	stw	fp,20(sp)
  8013f8:	df000504 	addi	fp,sp,20
  8013fc:	e13ffd15 	stw	r4,-12(fp)
  801400:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  801404:	e0bffe17 	ldw	r2,-8(fp)
  801408:	10800017 	ldw	r2,0(r2)
  80140c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  801410:	e13ffd17 	ldw	r4,-12(fp)
  801414:	08016940 	call	801694 <strlen>
  801418:	10800044 	addi	r2,r2,1
  80141c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  801420:	00000d06 	br	801458 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  801424:	e0bffc17 	ldw	r2,-16(fp)
  801428:	11000217 	ldw	r4,8(r2)
  80142c:	e1bffb17 	ldw	r6,-20(fp)
  801430:	e17ffd17 	ldw	r5,-12(fp)
  801434:	08016580 	call	801658 <memcmp>
  801438:	1004c03a 	cmpne	r2,r2,zero
  80143c:	1000031e 	bne	r2,zero,80144c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  801440:	e0bffc17 	ldw	r2,-16(fp)
  801444:	e0bfff15 	stw	r2,-4(fp)
  801448:	00000706 	br	801468 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80144c:	e0bffc17 	ldw	r2,-16(fp)
  801450:	10800017 	ldw	r2,0(r2)
  801454:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  801458:	e0fffe17 	ldw	r3,-8(fp)
  80145c:	e0bffc17 	ldw	r2,-16(fp)
  801460:	10fff01e 	bne	r2,r3,801424 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  801464:	e03fff15 	stw	zero,-4(fp)
  801468:	e0bfff17 	ldw	r2,-4(fp)
}
  80146c:	e037883a 	mov	sp,fp
  801470:	dfc00117 	ldw	ra,4(sp)
  801474:	df000017 	ldw	fp,0(sp)
  801478:	dec00204 	addi	sp,sp,8
  80147c:	f800283a 	ret

00801480 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  801480:	defffa04 	addi	sp,sp,-24
  801484:	dfc00515 	stw	ra,20(sp)
  801488:	df000415 	stw	fp,16(sp)
  80148c:	df000404 	addi	fp,sp,16
  801490:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  801494:	00802034 	movhi	r2,128
  801498:	10863d04 	addi	r2,r2,6388
  80149c:	10800017 	ldw	r2,0(r2)
  8014a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8014a4:	00003306 	br	801574 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8014a8:	e0bffd17 	ldw	r2,-12(fp)
  8014ac:	11000217 	ldw	r4,8(r2)
  8014b0:	08016940 	call	801694 <strlen>
  8014b4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8014b8:	e0bffd17 	ldw	r2,-12(fp)
  8014bc:	10c00217 	ldw	r3,8(r2)
  8014c0:	e0bffc17 	ldw	r2,-16(fp)
  8014c4:	1885883a 	add	r2,r3,r2
  8014c8:	10bfffc4 	addi	r2,r2,-1
  8014cc:	10800003 	ldbu	r2,0(r2)
  8014d0:	10803fcc 	andi	r2,r2,255
  8014d4:	1080201c 	xori	r2,r2,128
  8014d8:	10bfe004 	addi	r2,r2,-128
  8014dc:	10800bd8 	cmpnei	r2,r2,47
  8014e0:	1000031e 	bne	r2,zero,8014f0 <alt_find_file+0x70>
    {
      len -= 1;
  8014e4:	e0bffc17 	ldw	r2,-16(fp)
  8014e8:	10bfffc4 	addi	r2,r2,-1
  8014ec:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8014f0:	e0bffc17 	ldw	r2,-16(fp)
  8014f4:	1007883a 	mov	r3,r2
  8014f8:	e0bffe17 	ldw	r2,-8(fp)
  8014fc:	1885883a 	add	r2,r3,r2
  801500:	10800003 	ldbu	r2,0(r2)
  801504:	10803fcc 	andi	r2,r2,255
  801508:	1080201c 	xori	r2,r2,128
  80150c:	10bfe004 	addi	r2,r2,-128
  801510:	10800be0 	cmpeqi	r2,r2,47
  801514:	10000a1e 	bne	r2,zero,801540 <alt_find_file+0xc0>
  801518:	e0bffc17 	ldw	r2,-16(fp)
  80151c:	1007883a 	mov	r3,r2
  801520:	e0bffe17 	ldw	r2,-8(fp)
  801524:	1885883a 	add	r2,r3,r2
  801528:	10800003 	ldbu	r2,0(r2)
  80152c:	10803fcc 	andi	r2,r2,255
  801530:	1080201c 	xori	r2,r2,128
  801534:	10bfe004 	addi	r2,r2,-128
  801538:	1004c03a 	cmpne	r2,r2,zero
  80153c:	10000a1e 	bne	r2,zero,801568 <alt_find_file+0xe8>
  801540:	e0bffd17 	ldw	r2,-12(fp)
  801544:	11000217 	ldw	r4,8(r2)
  801548:	e1bffc17 	ldw	r6,-16(fp)
  80154c:	e17ffe17 	ldw	r5,-8(fp)
  801550:	08016580 	call	801658 <memcmp>
  801554:	1004c03a 	cmpne	r2,r2,zero
  801558:	1000031e 	bne	r2,zero,801568 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80155c:	e0bffd17 	ldw	r2,-12(fp)
  801560:	e0bfff15 	stw	r2,-4(fp)
  801564:	00000806 	br	801588 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  801568:	e0bffd17 	ldw	r2,-12(fp)
  80156c:	10800017 	ldw	r2,0(r2)
  801570:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  801574:	00c02034 	movhi	r3,128
  801578:	18c63d04 	addi	r3,r3,6388
  80157c:	e0bffd17 	ldw	r2,-12(fp)
  801580:	10ffc91e 	bne	r2,r3,8014a8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  801584:	e03fff15 	stw	zero,-4(fp)
  801588:	e0bfff17 	ldw	r2,-4(fp)
}
  80158c:	e037883a 	mov	sp,fp
  801590:	dfc00117 	ldw	ra,4(sp)
  801594:	df000017 	ldw	fp,0(sp)
  801598:	dec00204 	addi	sp,sp,8
  80159c:	f800283a 	ret

008015a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8015a0:	defffc04 	addi	sp,sp,-16
  8015a4:	df000315 	stw	fp,12(sp)
  8015a8:	df000304 	addi	fp,sp,12
  8015ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8015b0:	00bffa04 	movi	r2,-24
  8015b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8015b8:	e03ffe15 	stw	zero,-8(fp)
  8015bc:	00001e06 	br	801638 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
  8015c0:	e0bffe17 	ldw	r2,-8(fp)
  8015c4:	00c02034 	movhi	r3,128
  8015c8:	18c5dd04 	addi	r3,r3,6004
  8015cc:	10800324 	muli	r2,r2,12
  8015d0:	10c5883a 	add	r2,r2,r3
  8015d4:	10800017 	ldw	r2,0(r2)
  8015d8:	1004c03a 	cmpne	r2,r2,zero
  8015dc:	1000131e 	bne	r2,zero,80162c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
  8015e0:	e0bffe17 	ldw	r2,-8(fp)
  8015e4:	00c02034 	movhi	r3,128
  8015e8:	18c5dd04 	addi	r3,r3,6004
  8015ec:	10800324 	muli	r2,r2,12
  8015f0:	10c7883a 	add	r3,r2,r3
  8015f4:	e0bfff17 	ldw	r2,-4(fp)
  8015f8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  8015fc:	00802034 	movhi	r2,128
  801600:	10864104 	addi	r2,r2,6404
  801604:	10c00017 	ldw	r3,0(r2)
  801608:	e0bffe17 	ldw	r2,-8(fp)
  80160c:	1880040e 	bge	r3,r2,801620 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  801610:	00c02034 	movhi	r3,128
  801614:	18c64104 	addi	r3,r3,6404
  801618:	e0bffe17 	ldw	r2,-8(fp)
  80161c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  801620:	e0bffe17 	ldw	r2,-8(fp)
  801624:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  801628:	00000606 	br	801644 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80162c:	e0bffe17 	ldw	r2,-8(fp)
  801630:	10800044 	addi	r2,r2,1
  801634:	e0bffe15 	stw	r2,-8(fp)
  801638:	e0bffe17 	ldw	r2,-8(fp)
  80163c:	10800810 	cmplti	r2,r2,32
  801640:	103fdf1e 	bne	r2,zero,8015c0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  801644:	e0bffd17 	ldw	r2,-12(fp)
}
  801648:	e037883a 	mov	sp,fp
  80164c:	df000017 	ldw	fp,0(sp)
  801650:	dec00104 	addi	sp,sp,4
  801654:	f800283a 	ret

00801658 <memcmp>:
  801658:	31ffffc4 	addi	r7,r6,-1
  80165c:	3000061e 	bne	r6,zero,801678 <memcmp+0x20>
  801660:	00000a06 	br	80168c <memcmp+0x34>
  801664:	39ffffc4 	addi	r7,r7,-1
  801668:	00bfffc4 	movi	r2,-1
  80166c:	21000044 	addi	r4,r4,1
  801670:	29400044 	addi	r5,r5,1
  801674:	38800526 	beq	r7,r2,80168c <memcmp+0x34>
  801678:	20c00003 	ldbu	r3,0(r4)
  80167c:	28800003 	ldbu	r2,0(r5)
  801680:	18bff826 	beq	r3,r2,801664 <memcmp+0xc>
  801684:	1885c83a 	sub	r2,r3,r2
  801688:	f800283a 	ret
  80168c:	0005883a 	mov	r2,zero
  801690:	f800283a 	ret

00801694 <strlen>:
  801694:	20800007 	ldb	r2,0(r4)
  801698:	10000526 	beq	r2,zero,8016b0 <strlen+0x1c>
  80169c:	2007883a 	mov	r3,r4
  8016a0:	18c00044 	addi	r3,r3,1
  8016a4:	18800007 	ldb	r2,0(r3)
  8016a8:	103ffd1e 	bne	r2,zero,8016a0 <strlen+0xc>
  8016ac:	1905c83a 	sub	r2,r3,r4
  8016b0:	f800283a 	ret
